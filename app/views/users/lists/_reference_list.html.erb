<div id="reference-list">

  <div class="modal fade" id="referenceModal" tabindex="-1" role="dialog" aria-labelledby="referenceModal" v-if="referenceInModal.paper" :reference="referenceInModal">
    <div class="modal-dialog modal-lg" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
          <h4 class="modal-title">{{referenceInModal.paper.title}}</h4>
        </div>
        <div class="modal-body">
          <p class="header">
            <a
              class="tag"
              v-for="tag in referenceInModal.tag_list"
              v-text="tag"
            >
            </a>
          </p>
          <p class="header" v-if="referenceInModal.authors.length > 0">
          Authors
            <a
              class="tag"
              v-for="author in referenceInModal.authors"
              v-text="author.full_name"
            >
            </a>
          </p>
        <abstract :abstract="referenceInModal.abstract"></abstract>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
          <button type="button" class="btn btn-primary">Next</button>
        </div>
      </div>
    </div>
  </div>

  <% reference_count = @list.references.count %>
  <% if reference_count > 0 %>
    <%= render 'papers/sort_by' %>
    <i><%= reference_count%> papers added to this list</i>
  <% end %>

  <table class="table">
    <thead>
      <tr>
        <th width="50"></th>
        <th width="50">
          Age
        </th>
        <th>Paper</th>
        <th width="50"></th>
      </tr>
    </thead>
    <tbody
        is="reference-row"
        v-for="(reference,index) in allReferences"
        v-on:selected="selectReference(index)"
        :index="index"
        :reference="reference"
        :signed-in="signedIn"
        >
    </tbody>
  </table>
</div>

<% content_for(:page_app) do %>
  <%= render 'users/lists/notes_highlights' %>
  <%= render 'truncate_abstract' %>
  <%= render 'users/lists/reference_row' %>
  <script>
    Vue.component("abstract", {
      props: ["abstract"],
      data: function() {
        return {
          truncateAbstract: true
        }
      },
      template: '#abstract'
    })

    Vue.component("note", {
      props: ["note","signedIn"],
      data: function() {
        return {
          upvoteIsLoading: false,
          truncateNote: true
        }
      },
      methods: {
        upvote: function(note) {
          var self = this;
          var params = {
            id: note.id,
            type: "comment"
          };
          $.ajax({
            url: note.upvote_path + ".json",
            type: 'POST',
            data: params
          })
          .done(function(){
            note.upvoted = true
            note.upvotes = note.upvotes + 1
            self.upvoteIsLoading = false
          })
        },
        unupvote: function(note) {
          var self = this;
          var params = {
            id: note.id,
            type: "comment"
          };
          $.ajax({
            url: note.upvote_path + ".json",
            type: 'DELETE',
            data: params
          })
          .done(function(){
            note.upvoted = false
            note.upvotes = note.upvotes - 1
            self.upvoteIsLoading = false
          });

        },
        toggleUpvote: function(note) {
          if(!this.signedIn) {
            window.location.href = '/users/sign_in';
          } else if(!this.upvoteIsLoading) {
            this.upvoteIsLoading = true
            if(note.upvoted) {
              this.unupvote(note)
            } else {
              this.upvote(note)
            }
          }
        },
      },
      template: '#note'
    })

    Vue.component("reference-row", {
      props: ["reference","index","signedIn"],
      data: function() {
        return {
          recommendIsLoading: false,
          hoverPaperDetails: false,
          showPaperDetails: false,
          truncateAbstract: true
        }
      },
      computed: {
        hasPaperDetails: function() {
          return this.reference.authors.length > 0 || this.reference.notes.length > 0 || this.reference.tag_list.length > 0 || this.reference.abstract !== ''
        }
      },
      methods: {
        recommend: function(reference) {
          var self = this;
          var params = {
            id: reference.id,
            type: "list"
          };
          $.ajax({
            url: reference.recommend_path + ".json",
            type: 'POST',
            data: params
          })
          .done(function(){
            reference.recommended = true
            reference.recommends = reference.recommends + 1
            self.recommendIsLoading = false
          })
        },
        unrecommend: function(reference) {
          var self = this;
          var params = {
            id: reference.id,
            type: "reference"
          };
          $.ajax({
            url: reference.recommend_path + ".json",
            type: 'DELETE',
            data: params
          })
          .done(function(){
            reference.recommended = false
            reference.recommends = reference.recommends - 1
            self.recommendIsLoading = false
          });

        },
        toggleRecommend: function(reference) {
          if(!this.signedIn) {
            window.location.href = '/users/sign_in';
          } else if(!this.recommendIsLoading) {
            this.recommendIsLoading = true
            if(reference.recommended) {
              this.unrecommend(reference)
            } else {
              this.recommend(reference)
            }
          }
        },
      },
      template: '#reference-row'
    });
    var referenceListApp = new Vue({
      data: {
        signedIn: false,
        truncateAbstract: true,
        indexIndexInModal: 0,
        referenceInModal: {},
        allReferences: []
      },
      methods: {
        selectReference: function(index) {
          this.referenceIndexInModal = index
          this.referenceInModal = this.allReferences[index];
        }
      }
    });
    referenceListApp.signedIn = <%= user_signed_in? %>
    referenceListApp.allReferences = <%= raw render('users/lists/references.json', references: @references) %>
    referenceListApp.$mount('#reference-list')
  </script>
<% end %>