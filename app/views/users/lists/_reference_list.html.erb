<div id="reference-list">

  <div class="modal fade" id="referenceModal" tabindex="-1" role="dialog" aria-labelledby="referenceModal" v-if="selectedRef.paper" :reference="selectedRef">
    <div class="modal-dialog modal-lg" role="document">
      <div class="modal-content">
        <%= render 'users/lists/modal/modal_header' %>
        <div class="modal-body">
          <%= render 'users/lists/modal/section_notes_and_highlights' %>
          <%= render 'users/lists/modal/section_abstract' %>
          <%= render 'users/lists/modal/section_details' %>
        </div>
        <%= render 'users/lists/modal/modal_footer' %>
      </div>
    </div>
  </div>

  <% reference_count = @list.references.count %>
  <% if reference_count > 0 %>
    <%= render 'papers/sort_by' %>
    <i><%= reference_count%> papers added to this list</i>
  <% end %>

  <table class="table">
    <thead>
      <tr>
        <th width="50"></th>
        <th width="50">
          Age
        </th>
        <th>Paper</th>
        <th width="50"></th>
      </tr>
    </thead>
    <tbody
        is="reference-row"
        v-for="(reference,index) in allReferences"
        v-on:selected="selectReference(index)"
        :index="index"
        :r="reference"
        :signed-in="signedIn"
        >
    </tbody>
  </table>
</div>

<% content_for(:page_app) do %>
  <%= render 'votes/vote_template' %>
  <%= render 'references/mini_bib' %>
  <%= render 'users/lists/notes_highlights' %>
  <%= render 'truncate_abstract' %>
  <%= render 'users/lists/reference_row' %>
  <script>
    Vue.component("abstract", {
      props: ["abstract"],
      data: function() {
        return {
          truncateAbstract: true
        }
      },
      template: '#abstract'
    })

    Vue.component("mini-bib", {
      props: ["r"],
      template: '#mini-bib'
    })

    Vue.component("note", {
      props: ["note"],
      data: function() {
        return {
          truncateNote: true
        }
      },
      template: '#note'
    })

    Vue.component("reference-row", {
      props: ["r","index","signedIn"],
      data: function() {
        return {
          recommendIsLoading: false,
          hoverPaperDetails: false,
          showPaperDetails: false,
          truncateAbstract: true
        }
      },
      computed: {
        hasPaperDetails: function() {
          return this.r.notes.length > 0 || this.r.paper.tag_list.length > 0 || this.r.paper.abstract != null
        }
      },
      template: '#reference-row'
    });
    var referenceListApp = new Vue({
      data: {
        signedIn: false,
        currentUser: '',
        userCanEdit: false,
        truncateAbstract: true,
        referenceIndexInModal: 0,
        selectedRef: {},
        showAllNotes: false,
        hasAbstract: false,
        editAbstract: false,
        showTagForm: false,
        newTag: '',
        allReferences: []
      },
      computed: {
        editsAllowed: function() {
          return this.signedIn && this.userCanEdit
        },
        showNoteSubmit: function() {
          return this.selectedRef.note_form != ''
        },
        abstractImported: function() {
          return !this.selectedRef.paper.abstract_editable && this.hasAbstract
        }
      },
      mounted: function() {
        this.allReferences.forEach(function(reference) {
          Vue.set(reference, 'abstract_form', reference.paper.abstract)
          Vue.set(reference, 'note_form', '')
          reference.notes.forEach(function(note) {
            Vue.set(note, 'editNote', false)
            Vue.set(note, 'edit_form', note.content)
          })
        })

      },
      methods: {
        isCurrentUser: function(username) {
          return this.currentUser == username
        },
        selectReference: function(index) {
          this.referenceIndexInModal = index;
          this.selectedRef = this.allReferences[index];
          this.hasAbstract = this.selectedRef.paper.abstract != null;
          this.editAbstract = false;
          this.showTagForm = false;
        },
        cancelAbstractForm: function() {
          this.editAbstract = false
          this.selectedRef.abstract_form = this.selectedRef.abstract
        },
        submitAbstract: function(reference) {
          var self = this;
          var paper = reference.paper
          var params = {
            paper: {
              abstract: reference.abstract_form
            }
          };
          $.ajax({
            url: "/papers/" + paper.id  + ".json",
            type: 'PATCH',
            data: params
          })
          .done(function(){
            self.hasAbstract = true
            self.editAbstract = false
            reference.paper.abstract = reference.abstract_form
          })
        },
        submitTags: function() {
          var tag_list = this.selectedRef.paper.tag_list
          if(this.selectedRef.paper.tag_list.length == 0){ tag_list =[""]}

          var params = {
            paper: {
              tag_list: tag_list
            }
          };
          $.ajax({
            url: "/papers/" + this.selectedRef.paper.id  + ".json",
            type: 'PATCH',
            data: params
          })
          .done(function(){
          })
        },
        addTag: function() {
          if(this.newTag != '') {
            this.selectedRef.paper.tag_list.push(this.newTag)
            this.newTag = ''
            this.submitTags()
          }
        },
        removeTag: function(index){
          this.selectedRef.paper.tag_list.splice(index,1)
          this.submitTags()
        },
        submitNote: function() {
          var self = this
          var params = {
            comment: {
              content: this.selectedRef.note_form,
              commentable_type: 'Reference',
              commentable_id: this.selectedRef.id
            }
          };
          $.ajax({
            url: "/comments.json",
            type: 'POST',
            data: params
          })
          .done(function(newNote){
            self.selectedRef.note_form = ''
            newNote.voted = false
            newNote.votes = 0
            newNote.type ="comment"
            newNote.vote_path = "/comments/" + newNote.id + "/vote"
            newNote.time_ago = "now"
            newNote.user = self.currentUser
            newNote.edit_form = newNote.content
            newNote.editNote = false
            self.selectedRef.notes.unshift(newNote)
          })
        },
        deleteNote: function(note,index) {
          var self = this
          $.ajax({
            url: "/comments/" + note.id + ".json",
            type: 'DELETE'
          })
          .done(function(res){
            self.selectedRef.notes.splice(index,1)
          })
        },
        cancelEditNote: function(note) {
          note.edit_form = note.content
          note.editNote = false
        },
        updateNote: function(note) {
          var self = this
          var params = {
            comment: {
              content: note.edit_form,
              commentable_type: 'Reference'
            }
          };
          $.ajax({
            url: "/comments/" + note.id + ".json",
            type: 'PATCH',
            data: params
          })
          .done(function(res){
            note.content = note.edit_form
            note.editNote = false
          })
        }
      }
    });
    referenceListApp.signedIn = <%= user_signed_in? %>
    referenceListApp.currentUser = '<%= current_user ? current_user.username : '' %>'
    referenceListApp.userCanEdit = <%= current_user_can_edit?(list) || list.accepts_public_contributions? %>
    referenceListApp.allReferences = <%= raw render('users/lists/references.json', references: @references) %>
    referenceListApp.$mount('#reference-list')
  </script>
<% end %>