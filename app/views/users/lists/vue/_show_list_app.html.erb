<% content_for(:page_app) do %>
  <%= render 'votes/template_vote' %>
  <%= render 'references/template_mini_bib' %>
  <%= render 'users/lists/template_note' %>
  <%= render 'users/lists/template_truncate_abstract' %>
  <%= render 'users/lists/template_reference_row' %>
  <%= render 'users/lists/template_reference_list' %>
  <%= render 'users/lists/modal/template_reference_modal' %>
  <%= render 'crossref/template_crossref_search', list: @list %>
  <%= render 'crossref/template_add_by_locator', list: @list %>
  <script>
    <%= render 'users/lists/vue/components/abstract.js' %>
    <%= render 'users/lists/vue/components/mini_bib.js' %>
    <%= render 'users/lists/vue/components/note.js' %>
    <%= render 'users/lists/vue/components/reference_row.js' %>
    <%= render 'users/lists/vue/components/reference_list.js' %>
    <%= render 'users/lists/vue/components/reference_modal.js' %>
    <%= render 'crossref/crossref_search.js' %>
    <%= render 'crossref/add_by_locator.js' %>
    var listShowApp = new Vue({
      data: {
        list: {},
        signedIn: false,
        currentUser: '',
        userCanEdit: false,
        referenceIndexInModal: 0,
        selectedRef: {},
        filterKey: '',
        sortKey:'',
        sortOrders: {'age': 1, 'votes': -1},
        notesShown: 3,
        summariesShown: 3,
        listDescTruncated: true,
        showQuickAdd: false,
        summaries:[],
        allReferences: []
      },
      mounted: function() {
        this.allReferences.forEach(function(reference) {
          Vue.set(reference, 'abstract_form', reference.paper.abstract)
          Vue.set(reference, 'note_form', '')
          reference.notes.forEach(function(note) {
            Vue.set(note, 'editNote', false)
            Vue.set(note, 'edit_form', note.content)
          })
        })
      },
      computed: {
        displayedListDesc: function() {
          return this.$options.filters.truncate(this.list.description, 350, this.listDescTruncated)
        },
        editsAllowed: function() {
          return this.signedIn && this.userCanEdit
        },
        filteredData: function () {
          var sortKey = this.sortKey
          var filterKey = this.filterKey
          var order = this.sortOrders[sortKey]
          var data = this.allReferences
          var fuseOptions = {
            tokenize: true,
            shouldSort: true,
            threshold: 0.4,
            maxPatternLength: 32,
            minMatchCharLength: 1,
            keys: [
              "paper.title",
              "paper.authors.full_name",
              "paper.tag_list",
              "paper.abstract"
            ]
          };
          if(filterKey) {
            var fuse = new Fuse(data, fuseOptions);
            data = fuse.search(this.filterKey);
          }
          if (sortKey) {
            data = data.slice().sort(function (a, b) {
              if(sortKey == 'age'){
                a = a.paper['published_at']
                b = b.paper['published_at']
              } else {
                a = a[sortKey]
                b = b[sortKey]
              }
              return (a === b ? 0 : a > b ? 1 : -1) * order
            })
          }
          return data
        },
        notes: function() {
          var self = this
          var notes = this.filteredData.map(function(r,index) {
            var citation = self.$options.filters.cite(r);
            var notes = r.notes.map(function(n){
              return {'note': n, 'citation': citation, 'rIndex': index}
            })
            return notes
          });
          notes = [].concat.apply([], notes)
          notes = notes.sort(function(a,b) {
            if(b.note.votes < a.note.votes) return -1;
            if(b.note.votes > a.note.votes) return 1;
            if(b.note.created_at < a.note.created_at) return -1;
            if(b.note.created_at > a.note.created_at) return 1;
            return 0;
          })
          return notes
        }
      },
      methods: {
        selectReference: function(index) {
          this.referenceIndexInModal = index;
          this.selectedRef = this.filteredData[index];
        },
        addToFilter: function(add) {
          if(!this.filterKey.match(add)) {
            if(this.filterKey) {
                this.filterKey += ' ' + add
            } else {
                this.filterKey = add
            }
          }
        },
        sortBy: function (key) {
          this.sortKey = key;
          this.sortOrders[key] = this.sortOrders[key] * -1;
        }
      }
    });
    listShowApp.list = <%= raw render('users/lists/jbuilders/list.json', list: @list) %>
    listShowApp.signedIn = <%= user_signed_in? %>;
    listShowApp.currentUser = '<%= current_user ? current_user.username : '' %>';
    listShowApp.summaries = <%= raw render('users/lists/jbuilders/list_summaries.json', summaries: @list.summaries) %>;
    listShowApp.userCanEdit = <%= current_user_can_edit?(list) || list.accepts_public_contributions? %>;
    listShowApp.allReferences = <%= raw render('users/lists/jbuilders/references.json', references: @references) %>;
    listShowApp.$mount('#list-show');
  </script>
<% end %>